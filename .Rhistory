title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("price_std", palette = "Blues",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_young_pop", palette = "Blues",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
ward_medians <- data %>%
group_by(name_en) %>%
summarize(across(c('prop_young_pop', 'prop_hh_only_elderly','price_std','prop_managers'), ~ median(.x, na.rm = TRUE)))
wards_merged <- wards %>%
st_join(ward_medians, by='name_en')
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_hh_only_elderly", palette = "Blues",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_hh_only_elderly", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
ward_medians <- data %>%
group_by(name_en) %>%
summarize(across(c('prop_young_pop', 'prop_hh_only_elderly','price_std','prop_managers'), ~ mean(.x, na.rm = TRUE)))
wards_merged <- wards %>%
st_join(ward_medians, by='name_en')
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_hh_only_elderly", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("price_std", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_managers", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_high_wage", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
ward_medians <- data %>%
group_by(name_en) %>%
summarize(across(c('prop_young_pop', 'prop_hh_only_elderly','price_std','prop_managers','prop_high_wage'), ~ mean(.x, na.rm = TRUE)))
wards_merged <- wards %>%
st_join(ward_medians, by='name_en')
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_high_wage", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
ward_medians <- data %>%
group_by(name_en) %>%
summarize(across(c('prop_young_pop', 'prop_hh_only_elderly','price_std','prop_managers','prop_high_wage'), ~ median(.x, na.rm = TRUE)))
wards_merged <- wards %>%
st_join(ward_medians, by='name_en')
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_high_wage", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
ward_medians <- data %>%
group_by(name_en) %>%
summarize(across(c('prop_young_pop', 'prop_hh_only_elderly','price_std',
'prop_managers','prop_high_wage',
'log_vl_ugs_accessibility_norm',
'log_full_ugs_accessibility_norm'), ~ median(.x, na.rm = TRUE)))
wards_merged <- wards %>%
st_join(ward_medians, by='name_en')
# median high wage
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_high_wage", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
# Full accessibility
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("log_full_ugs_accessibility_norm", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("log_vl_ugs_accessibility_norm", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
ward_medians <- data %>%
group_by(name_en) %>%
summarize(across(c('prop_young_pop', 'prop_hh_only_elderly','price_std',
'prop_managers','prop_high_wage',
'log_vl_ugs_accessibility_norm',
'log_full_ugs_accessibility_norm'), ~ mean(.x, na.rm = TRUE)))
wards_merged <- wards %>%
st_join(ward_medians, by='name_en')
# median high wage
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("prop_high_wage", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
# Full accessibility
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("log_full_ugs_accessibility_norm", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
# Accessibility to very large parks
tmap_mode("plot")
tm_shape(wards_merged) +
tm_polygons("log_vl_ugs_accessibility_norm", palette = "RdYlGn",
title = "Median Value",
style = "quantile") +
tm_layout(frame = FALSE)
View(data)
View(data)
rdata <- data[c('prop_young_pop', 'prop_o65_pop', 'prop_o75_pop', 'prop_foreign_pop',
'prop_hh_only_elderly', 'prop_managers', 'prop_high_wage', 'prop_low_wage',
'prop_uni_graduates', 'price_std', 'prop_15_64', 'prop_1hh', 'prop_hh_head20',
'log_full_ugs_accessibility_norm','geometry')]
View(rdata)
View(rdata)
View(data)
nb <- poly2nb(rdata)
st_is_valid(rdata)
nb <- poly2nb(rdata, snap = 0.001)
nb <- poly2nb(rdata, snap = 0.01)
print(sum(sapply(nb,lengtg)==0))
print(sum(sapply(nb,length)==0))
rdata <- data[c('prop_young_pop', 'prop_o65_pop', 'prop_o75_pop', 'prop_foreign_pop',
'prop_hh_only_elderly', 'prop_managers', 'prop_high_wage', 'prop_low_wage',
'prop_uni_graduates', 'price_std', 'prop_15_64', 'prop_1hh', 'prop_hh_head20',
'log_full_ugs_accessibility_norm','geometry')]
nb <- poly2nb(rdata, snap = 0.001)
print(sum(sapply(nb,length)==0))
plot(st_geometry(rdata), border = "grey")
plot(nb, st_coordinates(st_centroid(rdata)), add = TRUE, col = "red")
plot(st_geometry(rdata), border = "grey")
plot(nb, st_coordinates(st_centroid(rdata)), add = TRUE, col = "red")
plot(st_geometry(rdata), border = "grey")
lw <- nb2listw(nb, style = "W")
knn_nb <- knearneigh(coords, k = 8)
nb_knn <- knn2nb(knn_nb)
lw <- nb2listw(nb_knn, style = 'W')
moran.test(rdata$log_full_ugs_accessibility_norm, lw)
gdf <- st_read("data/final/regression_data")
wards <- st_read("data/final/ugs_analysis_data.gpkg", layer="wards")
st_crs(gdf) == st_crs(wards) # Check CRS
unique(gdf$name_en)
data <- st_join(gdf, wards, join = st_within)
rdata <- data[c('prop_young_pop', 'prop_o65_pop', 'prop_o75_pop', 'prop_foreign_pop',
'prop_hh_only_elderly', 'prop_managers', 'prop_high_wage', 'prop_low_wage',
'prop_uni_graduates', 'price_std', 'prop_15_64', 'prop_1hh', 'prop_hh_head20',
'log_full_ugs_accessibility_norm','geometry')]
# Find k-nearest neighbors (e.g., k=3)
knn_nb <- knearneigh(coords, k = 8)
nb_knn <- knn2nb(knn_nb)
# Check again for isolated units
sum(sapply(nb_knn, length) == 0)
lw <- nb2listw(nb_knn, style = 'W')
moran.test(rdata$log_full_ugs_accessibility_norm, lw)
View(lw)
View(lw)
length(rdata$log_full_ugs_accessibility_norm)
length(nb_knn)  # should be equal to number of observations in rdata
# Find k-nearest neighbors (e.g., k=3)
knn_nb <- knearneigh(coords, k = 8)
nb_knn <- knn2nb(knn_nb)
length(nb_knn)  # should be equal to number of observations in rdata
# Find k-nearest neighbors (e.g., k=3)
coords <- st_coordinates(st_centroid(rdata))
knn_nb <- knearneigh(coords, k = 8)
nb_knn <- knn2nb(knn_nb)
moran.test(rdata$log_full_ugs_accessibility_norm, lw)
length(nb_knn)  # should be equal to number of observations in rdata
length(rdata$log_full_ugs_accessibility_norm)
lw <- nb2listw(nb_knn, style = 'W')
moran.test(rdata$log_full_ugs_accessibility_norm, lw)
gwl <- gw.glm(log_full_ugs_accessibility_norm ~ prop_young_pop + prop_o65_pop +
prop_o75_pop + prop_foreign_pop + prop_hh_only_elderly +
prop_managers + prop_high_wage + prop_low_wage +
prop_uni_graduates + price_std + prop_15_64 + prop_1hh +prop_hh_head20,
data = rdata,
coords = coords,
approach = "AICc",
family = "gaussian",
bw = bw.gwr(log_full_ugs_accessibility_norm ~ .,
data = rdata,
coords = coords,
adaptive = TRUE))  # Use an adaptive bandwidth
library('GWmodel')
gwl <- gw.glm(log_full_ugs_accessibility_norm ~ prop_young_pop + prop_o65_pop +
prop_o75_pop + prop_foreign_pop + prop_hh_only_elderly +
prop_managers + prop_high_wage + prop_low_wage +
prop_uni_graduates + price_std + prop_15_64 + prop_1hh +prop_hh_head20,
data = rdata,
coords = coords,
approach = "AICc",
family = "gaussian",
bw = bw.gwr(log_full_ugs_accessibility_norm ~ .,
data = rdata,
coords = coords,
adaptive = TRUE))  # Use an adaptive bandwidth
library(gwrr)
install.packages('gwrr')
library(gwrr)
formula <- log_full_ugs_accessibility_norm ~ prop_young_pop + prop_o65_pop +
prop_o75_pop + prop_foreign_pop + prop_hh_only_elderly +
prop_managers + prop_high_wage + prop_low_wage +
prop_uni_graduates + price_std + prop_15_64 + prop_1hh + prop_hh_head20
# find optimal bandwidth
bw_opt <- bw.gwr(formula, data = rdata, coords = st_coordinates(st_centroid(rdata)),
adaptive = TRUE, approach = "AICc")
bw_opt <- bw.gwr(formula, data = rdata, coords = st_coordinates(st_centroid(rdata)),
adaptive = TRUE, approach = "AICc")
library(caret)
install.packages("caret")
library(caret)
set.seed(42)
folds <- createFolds(rdata$log_full_ugs_accessibility_norm, k = 5, list = TRUE)
for(i in seq_along(lambda_seq)){
lambda_i <- lambda_seq[i]
fold_errors <- numeric(length(folds))
for(j in seq_along(folds)){
train_idx <- setdiff(seq_len(nrow(rdata)), folds[[j]])
test_idx  <- folds[[j]]
train_data <- rdata[train_idx, ]
test_data  <- rdata[test_idx, ]
coords_train <- st_coordinates(st_centroid(train_data))
coords_test <- st_coordinates(st_centroid(test_data))
# Fit the model on training data
mod <- gwl.est(formula = formula,
data = train_data,
coords = coords_train,
bw = 2000,  # Using same bw for simplicity
adaptive = TRUE,
lambda = lambda_i)
# Depending on gwl.est, you may need to write a predict method
# or extract predictions. Assume gwl.est returns an object with predictions:
preds <- predict(mod, newdata = test_data, newcoords = coords_test)$predictions
# Compute the Mean Squared Error for this fold
actual <- test_data$log_full_ugs_accessibility_norm
fold_errors[j] <- mean((actual - preds)^2)
}
cv_errors[i] <- mean(fold_errors)
cat("Lambda:", lambda_i, "CV MSE:", cv_errors[i], "\n")
}
cv_errors <- numeric(length(lambda_seq))
lambda_seq <- seq(0.01, 1, length.out = 20)  # A grid of lambda values
cv_errors <- numeric(length(lambda_seq))
# For each lambda, you might compute CV error using k-fold CV:
set.seed(42)
folds <- createFolds(rdata$log_full_ugs_accessibility_norm, k = 5, list = TRUE)
for(i in seq_along(lambda_seq)){
lambda_i <- lambda_seq[i]
fold_errors <- numeric(length(folds))
for(j in seq_along(folds)){
train_idx <- setdiff(seq_len(nrow(rdata)), folds[[j]])
test_idx  <- folds[[j]]
train_data <- rdata[train_idx, ]
test_data  <- rdata[test_idx, ]
coords_train <- st_coordinates(st_centroid(train_data))
coords_test <- st_coordinates(st_centroid(test_data))
# Fit the model on training data
mod <- gwl.est(formula = formula,
data = train_data,
coords = coords_train,
bw = 2000,  # Using same bw for simplicity
adaptive = TRUE,
lambda = lambda_i)
# Depending on gwl.est, you may need to write a predict method
# or extract predictions. Assume gwl.est returns an object with predictions:
preds <- predict(mod, newdata = test_data, newcoords = coords_test)$predictions
# Compute the Mean Squared Error for this fold
actual <- test_data$log_full_ugs_accessibility_norm
fold_errors[j] <- mean((actual - preds)^2)
}
cv_errors[i] <- mean(fold_errors)
cat("Lambda:", lambda_i, "CV MSE:", cv_errors[i], "\n")
}
gwl.est?
gwl.est??
?gwl.est
gwl.est?
lassogwr <- gwl.est(formula = formula,
data = rdata,
coords = st_coordinates(st_centroid(rdata)),
bw = 2000,
adaptive = TRUE
)
?gwl.est
lassogwr <- gwl.est(
form = formula,
locs = st_coordinates(st_centroid(rdata)),
data = rdata,
kernel = "exp",
)
coords <- st_coordinates(st_centroid(rdata$geometry))
gdf <- st_read("data/final/regression_data")
wards <- st_read("data/final/ugs_analysis_data.gpkg", layer="wards")
st_crs(gdf) == st_crs(wards) # Check CRS
data <- st_join(gdf, wards, join = st_within)
## EDA #########################################################################
variables <- c('prop_young_pop', 'prop_o65_pop', 'prop_o75_pop', 'prop_foreign_pop',
'prop_hh_only_elderly', 'prop_managers', 'prop_high_wage', 'prop_low_wage',
'prop_uni_graduates', 'price_std', 'prop_15_64', 'prop_1hh', 'prop_hh_head20',
'log_vl_ugs_accessibility_norm', 'log_full_ugs_accessibility_norm')
formula <- log_full_ugs_accessibility_norm ~ prop_young_pop + prop_o65_pop +
prop_o75_pop + prop_foreign_pop + prop_hh_only_elderly +
prop_managers + prop_high_wage + prop_low_wage +
prop_uni_graduates + price_std + prop_15_64 + prop_1hh + prop_hh_head20
coords <- st_coordinates(st_centroid(rdata$geometry))
rdata <- data[c('prop_young_pop', 'prop_o65_pop', 'prop_o75_pop', 'prop_foreign_pop',
'prop_hh_only_elderly', 'prop_managers', 'prop_high_wage', 'prop_low_wage',
'prop_uni_graduates', 'price_std', 'prop_15_64', 'prop_1hh', 'prop_hh_head20',
'log_full_ugs_accessibility_norm','geometry')]
# Find k-nearest neighbors (e.g., k=3)
coords <- st_coordinates(st_centroid(rdata))
View(coords)
View(coords)
# LASSO GWR
lassogwr <- gwl.est(
form = formula,
locs = st_coordinates(st_centroid(rdata)),
data = rdata,
kernel = "exp",
)
coords <- st_coordinates(st_centroid(rdata$geometry))
View(coords)
View(coords)
coords <- cbind(data$latitude, data$longitude)
View(coords)
View(coords)
View(data)
coords <- cbind(data$longitude, data$latitude)
lassogwr <- gwl.est(
form = formula,
locs = coords,
data = rdata,
kernel = "exp",
)
rdata_no_geom <- st_set_geometry(rdata, NULL)
coords <- cbind(rdata_no_geom$longitude, rdata_no_geom$latitude)
lassogwr <- gwl.est(
form = formula,
locs = coords,
data = rdata_no_geom,
kernel = "exp",
)
rdata_no_geom
View(rdata_no_geom)
View(rdata_no_geom)
View(rdata)
View(rdata)
rdata <- data[c('prop_young_pop', 'prop_o65_pop', 'prop_o75_pop', 'prop_foreign_pop',
'prop_hh_only_elderly', 'prop_managers', 'prop_high_wage', 'prop_low_wage',
'prop_uni_graduates', 'price_std', 'prop_15_64', 'prop_1hh', 'prop_hh_head20',
'log_full_ugs_accessibility_norm')]
# ANALYSIS - Geographically Weighted Lasso
rdata = subset(rdata, select = -c("geometry") )
# ANALYSIS - Geographically Weighted Lasso
rdata = subset(rdata, select = -c(geometry) )
View(rdata_no_geom)
View(rdata_no_geom)
rdata_no_geom <- st_set_geometry(rdata, NULL)
coords <- cbind(rdata_no_geom$longitude, rdata_no_geom$latitude)
lassogwr <- gwl.est(
form = formula,
locs = coords,
data = rdata_no_geom,
kernel = "exp",
)
names(rdata_no_geom)
dim(rdata_no_geom)
head(rdata_no_geom)
test_formula <- log_full_ugs_accessibility_norm ~ prop_young_pop
test_model <- gwl.est(
form = test_formula,
locs = coords,
data = rdata_no_geom,
kernel = "exp",
cv.tol = 0.001
test_formula <- log_full_ugs_accessibility_norm ~ prop_young_pop
test_formula <- log_full_ugs_accessibility_norm ~ prop_young_pop
test_model <- gwl.est(
form = test_formula,
locs = coords,
data = rdata_no_geom,
kernel = "exp")
test_model <- gwl.est(log_full_ugs_accessibility_norm ~ prop_young_pop,
locs = coords,
data = rdata_no_geom,
kernel = "exp")
test_model <- gwl.est(log_full_ugs_accessibility_norm ~ prop_young_pop,
locs = coords,
data = rdata_no_geom,
kernel = "exp")
test_model <- gwl.est(log_full_ugs_accessibility_norm ~ prop_young_pop,
coords,
rdata_no_geom,
"exp")
test_model <- gwl.est(log_full_ugs_accessibility_norm ~ prop_young_pop,
coords,
rdata_no_geom,
"exp")
test_model <- gwl.est(log_full_ugs_accessibility_norm ~ prop_young_pop,
coords,
rdata_no_geom,
"exp")
test_model <- gwl.est(log_full_ugs_accessibility_norm ~ prop_young_pop,
coords,
rdata_no_geom,
"exp")
# Extract coordinates from the geometry (correct step)
coords <- st_coordinates(rdata)  # Extracts longitude (X) and latitude (Y)
# Remove geometry for model data
rdata_no_geom <- st_drop_geometry(rdata)
lassogwr <- gwl.est(
form = formula,
locs = coords,          # Use coordinates from geometry
data = rdata_no_geom,
kernel = "exp"
)
lasso_test <- gwl.est(
form = formula,
locs = coords,
data = rdata_no_geom,
kernel = "exp",
bw = 2000  # Replace with your bandwidth
)
library('GWmodel')
spdf <- SpatialPointsDataFrame(coords, rdata_no_geom)
coords
View(coords)
View(coords)
# Extract coordinates from the geometry (correct step)
coords <- st_coordinates(rdata)  # Extracts longitude (X) and latitude (Y)
# Extract coordinates from the geometry (correct step)
# Extract centroids
centroids <- st_centroid(rdata$geometry)
rdata$centroid <- centroids
coords <- st_coordinates(centroids)
nrow(coords)
lassogwr <- gwl.est(
form = formula,
locs = coords,          # this fails bc it need 37 GBs of memory??
data = rdata_no_geom,
kernel = "exp"
)
install.packages('GWRLASSO')
library('GWRLASSO')
gdf <- st_read("data/final/regression_data")
View(gdf)
View(gdf)
View(gdf)
View(gdf)
# ANALYSIS - Geographically Weighted Lasso
# using gwrlasso package -> fix df: 1st column y, last two cols lat and lon
data <- gdf[ , !(names(gdf) %in% c("KEY_CODE_3", "name_en", "PC1","PC2","PC3","geometry"))]
data <- data %>% relocate(longitude, .after = last_col())
View(data)
View(data)
# ANALYSIS - Geographically Weighted Lasso
# using gwrlasso package -> fix df: 1st column y, last two cols lat and lon
data <- gdf[ , !(names(gdf) %in% c("KEY_CODE_3", "name_en", "PC1","PC2","PC3",geometry))]
View(data)
data <- gdf[ , !(names(gdf) %in% c("KEY_CODE_3", "name_en", "log_vl_ugs_accessibility_norm", "PC1","PC2","PC3","geometry"))]
data <- data %>% relocate(longitude, .after = last_col())
data <- data %>% relocate(log_full_ugs_accessibility_norm, .before = first_col())
gdf_no_geom <- st_set_geometry(gdf, NULL)
data <- gdf_no_geom[ , !(names(gdf_no_geom) %in% c("KEY_CODE_3", "name_en", "log_vl_ugs_accessibility_norm", "PC1","PC2","PC3","geometry"))]
data <- data %>% relocate(longitude, .after = last_col())
data <- data[, c("log_full_ugs_accessibility_norm", setdiff(names(data), "log_full_ugs_accessibility_norm"))]
View(data)
View(data)
lassogwr <- GWRLASSO_exponential(data, 2000, 0.8, exponential_kernel, 5)
colnames(data)[0] <- "y"
lassogwr <- GWRLASSO_exponential(data, 2000, 0.8, exponential_kernel, 5)
View(data)
View(data)
colnames(data)[1] <- "y"
View(data)
View(data)
lassogwr <- GWRLASSO_exponential(data, 2000, 0.8, exponential_kernel, 5)
View(gdf)
gc()
